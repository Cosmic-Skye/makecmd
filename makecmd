#!/usr/bin/env bash
#
# makecmd - Convert natural language to shell commands using Claude Code
# 
# Security-first implementation with comprehensive input/output sanitization

set -euo pipefail

# Set secure umask
umask 0077

# Check bash version (minimum 3.2)
BASH_MAJOR="${BASH_VERSION%%.*}"
BASH_MINOR="${BASH_VERSION#*.}"
BASH_MINOR="${BASH_MINOR%%.*}"

if [[ "$BASH_MAJOR" -lt 3 ]] || ([[ "$BASH_MAJOR" -eq 3 ]] && [[ "$BASH_MINOR" -lt 2 ]]); then
    echo "Error: makecmd requires bash version 3.2 or higher" >&2
    echo "Current bash version: $BASH_VERSION" >&2
    exit 6
fi

# Error handling
set -E  # Inherit error traps
trap 'error_handler $? $LINENO "$BASH_COMMAND"' ERR

# Function to handle errors
error_handler() {
    local exit_code=$1
    local line_number=$2
    local command=$3
    
    echo -e "${RED}Error: Command failed at line $line_number: $command${NC}" >&2
    echo -e "${RED}Exit code: $exit_code${NC}" >&2
    
    # Log the error
    if [[ -n "${LOG_DIR:-}" ]] && [[ -d "${LOG_DIR:-}" ]]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Line $line_number: $command (exit code: $exit_code)" >> "$LOG_DIR/makecmd.log" 2>/dev/null || true
    fi
    
    # Clean up any temporary files
    cleanup_on_error
    
    exit $exit_code
}

# Function to clean up on error
cleanup_on_error() {
    # Remove any temporary files created during execution
    rm -f /tmp/makecmd.* 2>/dev/null || true
    
    # Release any locks if they exist
    if [[ -n "${CACHE_DIR:-}" ]]; then
        find "${CACHE_DIR}" -name "*.lock" -type d -mmin +1 -exec rmdir {} \; 2>/dev/null || true
    fi
}

# Version and metadata
readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Find library directory (handle both normal and installed locations)
if [[ -d "${SCRIPT_DIR}/lib" ]]; then
    readonly LIB_DIR="${SCRIPT_DIR}/lib"
elif [[ -d "/usr/local/lib/makecmd" ]]; then
    readonly LIB_DIR="/usr/local/lib/makecmd"
else
    echo "Error: Cannot find makecmd library directory" >&2
    exit 6
fi

# Load libraries (order matters for dependencies)
source "${LIB_DIR}/compat.sh"
source "${LIB_DIR}/platform.sh"
source "${LIB_DIR}/logger.sh"
source "${LIB_DIR}/sanitizer.sh"
source "${LIB_DIR}/validator.sh"
source "${LIB_DIR}/cache.sh"
source "${LIB_DIR}/config.sh"
source "${LIB_DIR}/ratelimit.sh"
source "${LIB_DIR}/audit.sh"

# Only load advanced features if bash 4+ is available
if [[ "${BASH_VERSION%%.*}" -ge 4 ]]; then
    source "${LIB_DIR}/error_handler.sh"
    source "${LIB_DIR}/metrics.sh"
    source "${LIB_DIR}/claude_pool.sh"
else
    # Define stub functions for bash 3.2
    start_timer() { :; }
    stop_timer() { echo "0"; }
    increment_counter() { :; }
    handle_recoverable_error() { return 1; }
    handle_critical_error() { return "$1"; }
    init_metrics() { :; }
    init_connection_pool() { :; }
    call_claude_pooled() { call_claude "$@"; }
    health_check() { echo '{"status":"unknown"}'; }
    get_metrics_summary() { echo "Metrics require bash 4+"; }
    validate_system_state() { return 0; }
    cleanup_on_error() { :; }
fi

source "${LIB_DIR}/validation.sh"

# Constants (will be updated by config)
MAX_INPUT_LENGTH=500
CLAUDE_TIMEOUT=30
DEFAULT_CACHE_TTL=3600
readonly LOG_DIR="${HOME}/.makecmd/logs"
readonly CACHE_DIR="${HOME}/.makecmd/cache"
readonly CONFIG_FILE="${HOME}/.makecmdrc"

# Color codes for output
readonly RED='\033[0;31m'
readonly YELLOW='\033[1;33m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly BOLD='\033[1m'
readonly NC='\033[0m' # No Color

# Global variables
DRY_RUN=false
EXPLAIN_MODE=false
SAFE_MODE=false
NO_CACHE=false
DEBUG=false
OUTPUT_MODE="auto" # auto, prefill, clipboard, stdout

# Error codes
readonly E_SUCCESS=0
readonly E_INVALID_INPUT=1
readonly E_CLAUDE_ERROR=2
readonly E_DANGEROUS_COMMAND=3
readonly E_TIMEOUT=4
readonly E_CONFIG_ERROR=5
readonly E_DEPENDENCY_ERROR=6

# Initialize system
init_logging
init_metrics

# Ensure required directories exist
mkdir -p "$LOG_DIR" "$CACHE_DIR" "${HOME}/.makecmd/circuit_breaker"

# Function to display usage
usage() {
    cat << EOF
Usage: $SCRIPT_NAME [OPTIONS] "natural language description"
       $SCRIPT_NAME [OPTIONS] < input.txt
       echo "description" | $SCRIPT_NAME [OPTIONS]

Convert natural language to shell commands using Claude Code.

OPTIONS:
    -d, --dry-run      Print command without any side effects
    -e, --explain      Explain the generated command
    -s, --safe-mode    Extra restrictions on command generation
    -n, --no-cache     Bypass local cache
    -D, --debug        Enable debug logging
    -o, --output MODE  Output mode: auto, prefill, clipboard, stdout
    -h, --help         Display this help message
    -v, --version      Display version information

EXAMPLES:
    $SCRIPT_NAME "list all python files"
    $SCRIPT_NAME -d "show disk usage"
    echo "compress this directory" | $SCRIPT_NAME -e

SECURITY:
    All input is sanitized before processing
    Generated commands are validated for safety
    Commands are never auto-executed
    User confirmation required for destructive operations

EOF
}

# Function to display version
version() {
    echo "$SCRIPT_NAME version $VERSION"
}

# Function to log messages
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Always log to file (with error handling)
    if ! echo "[$timestamp] [$level] $message" >> "$LOG_DIR/makecmd.log" 2>/dev/null; then
        # If we can't write to log file, at least output to stderr
        echo "[$level] Warning: Cannot write to log file - $message" >&2
    fi
    
    # Log to stderr if debug mode
    if [[ "$DEBUG" == "true" ]] || [[ "$level" == "ERROR" ]]; then
        echo "[$level] $message" >&2
    fi
}

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check for claude command
    if ! command -v claude > /dev/null 2>&1; then
        missing_deps+=("claude")
    fi
    
    # Check for optional clipboard commands
    if [[ "$OUTPUT_MODE" == "clipboard" ]] || [[ "$OUTPUT_MODE" == "auto" ]]; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            command -v pbcopy > /dev/null 2>&1 || log "WARN" "pbcopy not found"
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            command -v xclip > /dev/null 2>&1 && command -v xsel > /dev/null 2>&1 || log "WARN" "xclip/xsel not found"
        fi
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${RED}Error: Required dependencies missing:${NC}" >&2
        printf '%s\n' "${missing_deps[@]}" >&2
        echo -e "\nPlease install Claude Code: https://claude.ai/code" >&2
        exit $E_DEPENDENCY_ERROR
    fi
}

# Function to handle signals
cleanup() {
    log "INFO" "Received interrupt signal, cleaning up..."
    exit 130
}

trap cleanup INT TERM

# Function to create Claude prompt
create_claude_prompt() {
    local sanitized_input="$1"
    
    cat << EOF
Convert the following request to a shell command. 

RULES:
1. Return ONLY the shell command, nothing else
2. No explanations, no markdown, no formatting
3. Single line only - no newlines or line breaks
4. Command must be safe and non-destructive
5. If the request is dangerous or unclear, return exactly: ERROR: [reason]
6. Do not include any characters that could trigger execution

Request: $sanitized_input

Command:
EOF
}

# Function to call Claude Code
call_claude() {
    local prompt="$1"
    local temp_file=""
    local output=""
    local exit_code=0
    
    # Create temp file with error handling
    if ! temp_file=$(mktemp -t makecmd.XXXXXX 2>/dev/null); then
        log "ERROR" "Failed to create temporary file"
        return $E_CLAUDE_ERROR
    fi
    
    # Set trap to clean up temp file
    trap "rm -f '$temp_file'" EXIT INT TERM
    
    # Create error file for stderr capture
    local error_file="${temp_file}.err"
    
    # Use claude with proper syntax
    if echo "$prompt" | claude --print > "$temp_file" 2>"$error_file"; then
        output=$(cat "$temp_file" 2>/dev/null || echo "")
        exit_code=0
    else
        exit_code=$?
        local error_msg=$(cat "$error_file" 2>/dev/null || echo "Unknown error")
        
        if [[ $exit_code -eq 124 ]]; then
            log "ERROR" "Claude Code timed out after ${CLAUDE_TIMEOUT}s"
            echo -e "${RED}Error: Command generation timed out. Try again or increase timeout in config.${NC}" >&2
            exit_code=$E_TIMEOUT
        elif [[ $exit_code -eq 127 ]]; then
            log "ERROR" "Claude Code command not found"
            echo -e "${RED}Error: Claude Code not found. Please install from https://claude.ai/code${NC}" >&2
            exit_code=$E_DEPENDENCY_ERROR
        else
            log "ERROR" "Claude Code failed with exit code: $exit_code - $error_msg"
            echo -e "${RED}Error: Failed to generate command. Check logs for details.${NC}" >&2
            exit_code=$E_CLAUDE_ERROR
        fi
    fi
    
    # Clean up temp files and remove trap
    rm -f "$temp_file" "$error_file"
    trap - EXIT INT TERM
    
    if [[ $exit_code -eq 0 ]]; then
        if [[ -z "$output" ]]; then
            log "ERROR" "Claude returned empty response"
            return $E_CLAUDE_ERROR
        fi
        echo "$output"
    fi
    
    return $exit_code
}

# Function to detect current shell
detect_shell() {
    local shell_name=""
    
    # Try to detect from parent process
    if [[ -n "${SHELL:-}" ]]; then
        shell_name=$(basename "$SHELL")
    else
        # Fallback to parsing ps output
        shell_name=$(ps -p $$ -o comm= 2>/dev/null || echo "bash")
    fi
    
    echo "$shell_name"
}

# Function to pre-fill terminal
prefill_terminal() {
    local command="$1"
    local shell_type=$(detect_shell)
    
    # Since the script runs in bash, we can't directly prefill zsh
    # For now, return 1 to use clipboard instead
    return 1
}

# Function to copy to clipboard
copy_to_clipboard() {
    local command="$1"
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo -n "$command" | pbcopy
        return $?
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v xclip > /dev/null 2>&1; then
            echo -n "$command" | xclip -selection clipboard
            return $?
        elif command -v xsel > /dev/null 2>&1; then
            echo -n "$command" | xsel --clipboard --input
            return $?
        fi
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        echo -n "$command" | clip
        return $?
    fi
    
    return 1
}

# Function to output command
output_command() {
    local command="$1"
    local mode="$OUTPUT_MODE"
    
    # Auto mode: try prefill, then clipboard, then stdout
    if [[ "$mode" == "auto" ]]; then
        if [[ -t 0 ]] && [[ -t 1 ]]; then
            # Interactive terminal
            if prefill_terminal "$command"; then
                echo -e "${GREEN}✓ Command pre-filled in terminal${NC}"
                return 0
            elif copy_to_clipboard "$command"; then
                echo -e "${GREEN}✓ Command copied to clipboard${NC}"
                echo -e "${BOLD}Command:${NC} $command"
                return 0
            else
                mode="stdout"
            fi
        else
            mode="stdout"
        fi
    fi
    
    case "$mode" in
        prefill)
            if prefill_terminal "$command"; then
                echo -e "${GREEN}✓ Command pre-filled in terminal${NC}"
            else
                echo -e "${YELLOW}Warning: Cannot pre-fill terminal, showing command instead${NC}"
                echo -e "${BOLD}Command:${NC} $command"
            fi
            ;;
        clipboard)
            if copy_to_clipboard "$command"; then
                echo -e "${GREEN}✓ Command copied to clipboard${NC}"
                echo -e "${BOLD}Command:${NC} $command"
            else
                echo -e "${YELLOW}Warning: Cannot copy to clipboard${NC}"
                echo -e "${BOLD}Command:${NC} $command"
            fi
            ;;
        stdout|*)
            echo -e "${BOLD}Generated command:${NC}"
            echo -e "${BLUE}$command${NC}"
            echo -e "${YELLOW}⚠ Review before executing${NC}"
            ;;
    esac
}

# Function to explain command
explain_command() {
    local command="$1"
    
    echo -e "${BOLD}Command:${NC} $command"
    echo -e "\n${BOLD}Explanation:${NC}"
    
    # Use Claude to explain the command
    local explain_prompt="Explain this shell command in simple terms, including what it does and any potential risks: $command"
    
    if output=$(call_claude "$explain_prompt"); then
        echo "$output"
    else
        echo "Unable to generate explanation"
    fi
}

# Main function
main() {
    local input=""
    
    # Get input from arguments or stdin
    if [[ $# -gt 0 ]]; then
        input="$*"
    else
        # Read from stdin
        input=$(cat)
    fi
    
    # Start performance timer
    start_timer "main_operation"
    
    # Validate input length
    if [[ ${#input} -gt $MAX_INPUT_LENGTH ]]; then
        echo -e "${RED}Error: Input too long (max $MAX_INPUT_LENGTH characters)${NC}" >&2
        record_counter_metric "errors" 1 '{"type":"input_too_long"}'
        exit $E_INVALID_INPUT
    fi
    
    # Sanitize input with validation
    local sanitized_input=$(sanitize_input_validated "$input")
    
    if [[ -z "$sanitized_input" ]]; then
        echo -e "${RED}Error: Invalid input after sanitization${NC}" >&2
        exit $E_INVALID_INPUT
    fi
    
    # Additional security checks
    if ! validate_encoding "$input"; then
        echo -e "${RED}Error: Invalid character encoding in input${NC}" >&2
        log_error_audit "$input" "invalid_encoding" "Invalid character encoding detected"
        exit $E_INVALID_INPUT
    fi
    
    if check_injection_attempts "$sanitized_input"; then
        echo -e "${RED}Error: Potential injection attempt detected${NC}" >&2
        log_security_audit "injection_attempt" "$input" "Command injection pattern detected"
        exit $E_INVALID_INPUT
    fi
    
    if check_sensitive_info "$sanitized_input"; then
        echo -e "${YELLOW}Warning: Input may contain sensitive information${NC}" >&2
    fi
    
    log "INFO" "Processing request: $sanitized_input"
    
    # Check cache
    local cache_key=$(generate_cache_key "$sanitized_input")
    local cached_command=""
    
    if [[ "$NO_CACHE" == "false" ]] && [[ -n "$cache_key" ]]; then
        cached_command=$(get_cached_command "$cache_key" || true)
    fi
    
    local command=""
    
    if [[ -n "$cached_command" ]]; then
        log "INFO" "Using cached command"
        command="$cached_command"
        increment_counter "cache_hits"
    else
        # Check rate limit
        if ! check_rate_limit; then
            echo -e "${RED}Error: Rate limit exceeded. Please try again in a few seconds.${NC}" >&2
            echo -e "${YELLOW}Tip: Use cached results with similar queries to avoid rate limits.${NC}" >&2
            handle_recoverable_error "rate_limit" $E_CLAUDE_ERROR "Rate limit exceeded"
            exit $E_CLAUDE_ERROR
        fi
        
        increment_counter "cache_misses"
        
        # Create prompt and call Claude with pooling
        local prompt=$(create_claude_prompt "$sanitized_input")
        
        if ! output=$(call_claude_pooled "$prompt"); then
            # Error message already displayed by call_claude_pooled
            exit $?
        fi
        
        # Sanitize Claude's output
        command=$(sanitize_claude_output "$output")
        
        # Check for error response
        if [[ "$command" =~ ^ERROR: ]]; then
            echo -e "${RED}$command${NC}" >&2
            exit $E_INVALID_INPUT
        fi
        
        # Validate command
        if ! validate_command "$command" "$SAFE_MODE"; then
            echo -e "${RED}Error: Generated command failed safety validation${NC}" >&2
            echo -e "${RED}Command: $command${NC}" >&2
            log_security_audit "dangerous_command" "$sanitized_input" "Command failed validation: $command"
            exit $E_DANGEROUS_COMMAND
        fi
        
        # Cache the command
        if [[ "$NO_CACHE" == "false" ]] && [[ -n "$cache_key" ]]; then
            cache_command "$cache_key" "$command"
        fi
        
        # Log successful command generation
        log_command_audit "$sanitized_input" "$command" "false" "$SAFE_MODE"
    fi
    
    if [[ -n "$cached_command" ]]; then
        # Log cached command use
        log_command_audit "$sanitized_input" "$command" "true" "$SAFE_MODE"
    fi
    
    # Handle dry run
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "$command"
        exit $E_SUCCESS
    fi
    
    # Handle explain mode
    if [[ "$EXPLAIN_MODE" == "true" ]]; then
        explain_command "$command"
        exit $E_SUCCESS
    fi
    
    # Output command with safety warning
    output_command "$command"
    
    # Show safety warning based on risk level
    echo
    echo -e "$(generate_safety_warning "$command")"
    
    # Stop timer and record metric
    local duration=$(stop_timer "main_operation" "{\"input_length\":${#input},\"cached\":\"$([[ -n \"$cached_command\" ]] && echo true || echo false)\"}") 
    log_performance "main_operation" "$duration"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -e|--explain)
            EXPLAIN_MODE=true
            shift
            ;;
        -s|--safe-mode)
            SAFE_MODE=true
            shift
            ;;
        -n|--no-cache)
            NO_CACHE=true
            shift
            ;;
        -D|--debug)
            DEBUG=true
            shift
            ;;
        -o|--output)
            OUTPUT_MODE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit $E_SUCCESS
            ;;
        -v|--version)
            version
            exit $E_SUCCESS
            ;;
        --health)
            health_check
            exit $E_SUCCESS
            ;;
        --metrics)
            get_metrics_summary "${2:-today}"
            exit $E_SUCCESS
            ;;
        --validate)
            create_validation_report
            exit $E_SUCCESS
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo -e "${RED}Error: Unknown option $1${NC}" >&2
            usage
            exit $E_INVALID_INPUT
            ;;
        *)
            break
            ;;
    esac
done

# Load configuration
load_config_validated "$CONFIG_FILE" || load_config "$CONFIG_FILE"

# Validate startup configuration
if ! validate_startup_config; then
    echo -e "${RED}Error: Configuration validation failed${NC}" >&2
    echo "Run 'makecmd --validate' for detailed report" >&2
    exit $E_CONFIG_ERROR
fi

# Make configuration values readonly after loading
readonly MAX_INPUT_LENGTH
readonly CLAUDE_TIMEOUT
readonly DEFAULT_CACHE_TTL

# Make global variables readonly after configuration is loaded
readonly DRY_RUN
readonly EXPLAIN_MODE
readonly SAFE_MODE
readonly NO_CACHE
readonly DEBUG
readonly OUTPUT_MODE

# Check dependencies
check_dependencies

# Validate system state
if ! validate_system_state; then
    log "WARN" "System state validation failed, continuing anyway"
fi

# Set up error handling and cleanup
trap 'cleanup_on_error $?' EXIT

# Run main function with error recovery
if ! main "$@"; then
    exit_code=$?
    handle_critical_error $exit_code "Main function failed" "use_cache"
    exit $exit_code
fi

# Success - remove error trap
trap - EXIT